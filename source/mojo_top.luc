module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]    // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  alu alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      dff in1_reg[16];
      dff in2_reg[16];
      dff alufn_reg[6];
      fsm state = {START, IN1, IN2, FUNCTION, SOLVE, ERROR}; // Initializate fsm
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    alu.firstNumber = 16x{0};  // input zero first
    alu.secondNumber = 16x{0}; // input zero first
    alu.alufn = 6x{0};         // input zero first
    case (state.q) {
    
      // Default state is in start to allow for manual testing
      state.START:
        io_led[2][7] = 1;
        if(io_button[0]){
          state.d = state.IN1;
        }
        
      state.IN1:
        in1_reg.d[7:0] = io_dip[0][7:0];
        in1_reg.d[15:8] = io_dip[1][7:0];
        io_led[2][6] = 1;
        if(io_button[1]){
          state.d = state.IN2;
        }
      state.IN2:
        in2_reg.d[7:0] = io_dip[0][7:0];
        in2_reg.d[15:8] = io_dip[1][7:0];
        io_led[2][5] = 1;
        if(io_button[2]){
          state.d = state.FUNCTION;
        }
      state.FUNCTION:
        alufn_reg.d[4:0] = io_dip[0][4:0];
        io_led[2][4] = 1;
        if(io_button[3]){
          state.d = state.SOLVE;
        }
      state.SOLVE:
        alu.firstNumber = in1_reg.q[15:0];
        alu.secondNumber = in2_reg.q[15:0];
        alu.alufn = alufn_reg.q[5:0];
        io_led[1] = alu.answer[15:8];
        io_led[0] = alu.answer[7:0];
        io_led[2][3] = 1;
        if(io_button[4]){
          state.d = state.START;
        }
  }
}