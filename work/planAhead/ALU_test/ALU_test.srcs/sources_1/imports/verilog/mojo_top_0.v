/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu_answer;
  reg [16-1:0] M_alu_firstNumber;
  reg [16-1:0] M_alu_secondNumber;
  reg [6-1:0] M_alu_alufn;
  alu_1 alu (
    .firstNumber(M_alu_firstNumber),
    .secondNumber(M_alu_secondNumber),
    .alufn(M_alu_alufn),
    .answer(M_alu_answer)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_in1_reg_d, M_in1_reg_q = 1'h0;
  reg [15:0] M_in2_reg_d, M_in2_reg_q = 1'h0;
  reg [5:0] M_alufn_reg_d, M_alufn_reg_q = 1'h0;
  localparam START_state = 3'd0;
  localparam IN1_state = 3'd1;
  localparam IN2_state = 3'd2;
  localparam FUNCTION_state = 3'd3;
  localparam SOLVE_state = 3'd4;
  localparam ERROR_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_in2_reg_d = M_in2_reg_q;
    M_in1_reg_d = M_in1_reg_q;
    M_alufn_reg_d = M_alufn_reg_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu_firstNumber = 16'h0000;
    M_alu_secondNumber = 16'h0000;
    M_alu_alufn = 6'h00;
    
    case (M_state_q)
      START_state: begin
        io_led[16+7+0-:1] = 1'h1;
        if (io_button[0+0-:1]) begin
          M_state_d = IN1_state;
        end
      end
      IN1_state: begin
        M_in1_reg_d[0+7-:8] = io_dip[0+0+7-:8];
        M_in1_reg_d[8+7-:8] = io_dip[8+0+7-:8];
        io_led[16+6+0-:1] = 1'h1;
        if (io_button[1+0-:1]) begin
          M_state_d = IN2_state;
        end
      end
      IN2_state: begin
        M_in2_reg_d[0+7-:8] = io_dip[0+0+7-:8];
        M_in2_reg_d[8+7-:8] = io_dip[8+0+7-:8];
        io_led[16+5+0-:1] = 1'h1;
        if (io_button[2+0-:1]) begin
          M_state_d = FUNCTION_state;
        end
      end
      FUNCTION_state: begin
        M_alufn_reg_d[0+4-:5] = io_dip[0+0+4-:5];
        io_led[16+4+0-:1] = 1'h1;
        if (io_button[3+0-:1]) begin
          M_state_d = SOLVE_state;
        end
      end
      SOLVE_state: begin
        M_alu_firstNumber = M_in1_reg_q[0+15-:16];
        M_alu_secondNumber = M_in2_reg_q[0+15-:16];
        M_alu_alufn = M_alufn_reg_q[0+5-:6];
        io_led[8+7-:8] = M_alu_answer[8+7-:8];
        io_led[0+7-:8] = M_alu_answer[0+7-:8];
        io_led[16+3+0-:1] = 1'h1;
        if (io_button[4+0-:1]) begin
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_in1_reg_q <= 1'h0;
      M_in2_reg_q <= 1'h0;
      M_alufn_reg_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_in1_reg_q <= M_in1_reg_d;
      M_in2_reg_q <= M_in2_reg_d;
      M_alufn_reg_q <= M_alufn_reg_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
